version: "3.9"

services:
  traefik:
    image: traefik:v3.0
    command:
      - --providers.file.filename=/etc/traefik/dynamic.yml
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${LE_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/traefik.dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik-le:/letsencrypt
    restart: unless-stopped
    labels:
      - traefik.enable=true

  postgres:
    image: postgres:16
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server","--appendonly","yes"]
    volumes:
      - redis_data:/data
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    environment:
      QDRANT__STORAGE__ON_DISK: "true"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    env_file: .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.minio.rule=Host(`${MINIO_HOST}`)
      - traefik.http.routers.minio.entrypoints=websecure
      - traefik.http.routers.minio.tls.certresolver=le
      - traefik.http.services.minio.loadbalancer.server.port=9001

  ollama:
    image: ollama/ollama:latest
    volumes:
      - ollama_models:/root/.ollama
    restart: unless-stopped

  api:
    build:
      context: ./docker/api
    env_file: .env
    command: gunicorn core.asgi:application -k uvicorn.workers.UvicornWorker -w 9 -b 0.0.0.0:8000 --timeout 120
    depends_on:
      - postgres
      - qdrant
      - redis
      - minio
    volumes:
      - ./backend:/app
      - hf_cache:/root/.cache/huggingface
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`${API_HOST}`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls.certresolver=le
      - traefik.http.services.api.loadbalancer.server.port=8000

  worker:
    build:
      context: ./docker/worker
    env_file: .env
    command: celery -A core.celery_app worker --autoscale=8,2 -O fair
    depends_on:
      - redis
    volumes:
      - ./backend:/app
      - hf_cache:/root/.cache/huggingface
    restart: unless-stopped

  #frontend:
   # build:
    #  context: ./docker/frontend
   # restart: unless-stopped
   # labels:
   #   - traefik.enable=true
   #   - traefik.http.routers.front.rule=Host(`${FRONT_HOST}`)
   #   - traefik.http.routers.front.entrypoints=websecure
   #   - traefik.http.routers.front.tls.certresolver=le
   #   - traefik.http.services.front.loadbalancer.server.port=80

  chunker:
    build:
      context: ./docker/chunker
    env_file: .env
    depends_on:
      - minio
      - qdrant
    command: tail -f /dev/null
    volumes:
      - ./chunker:/app
      - hf_cache:/root/.cache/huggingface
    restart: unless-stopped

volumes:
  traefik-le:
  pg_data:
  redis_data:
  qdrant_data:
  minio_data:
  ollama_models:
  hf_cache: